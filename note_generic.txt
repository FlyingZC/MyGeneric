160810
泛型与反射结合
1.
E — Element，常用在java Collection里，如：List<E>,Iterator<E>,Set<E>
K,V — Key，Value，代表Map的键值对
N — Number，数字
T — Type，类型，如String，Integer等等

2.泛型接口
com.zc.generic.interf
实现泛型接口
public interface Info<T>{}

实现
方式一
public class InfoImpl implements Info<String>{}
//方式二:使用 泛型类 实现 泛型接口
public class InfoImpl2<T> implements Info<T> {}
//方式二中:可采用多个泛型参数
public class InfoImpl3<T,U> implements Info<T>{}

3.泛型静态方法的调用
com.zc.generic.z02
StaticFan.java

StaticFan.<Integer>staticMethod(1);

4.泛型与可变个数形参
T04Arr

5.泛型 类型绑定：extends
<T extends Comparable> 可以继承类或接口
表示该范围是后者的子类型

160907
类型绑定
泛型变量 T t只能调用Object类的方法


无边界通配符：？
那有没有一种办法，生成一个变量，可以将不同类型的实例赋值给他呢

？与T的区别
大家可能会有疑问，那无边界通配符？与泛型变量T有什么区别呢？
答案是：他们俩没有任何联系！！！！！
泛型变量T不能在代码用于创建变量，只能在类，接口，函数中声明以后，才能使用。

而无边界通配符？则只能用于填充泛型变量T，表示通配任何类型！！！！再重复一遍：
？只能用于填充泛型变量T。它是用来填充T的！！！！只是填充方式的一种！！！

Box<?> box;//声明时候可以使用?  
box = new Box<String>();//一旦创建对象，必须使用具体类型  

即填充泛型变量T的位置，不能出现在后面String的位置！！！！
下面的第三行，第四行，都是错误的。通配符不能用于定义变量。

class Person<T>{}

Person<Integer> p1=new Person<Integer>();
Person<String> p2=new Perons<String>();

此时,创建对象时,?可以替换Integer或String等一切可能出现的T类型
Person<?> p=new Person<String>();

new Point<Number>();也是可以成功赋值的，这说明包括边界自身。








 




